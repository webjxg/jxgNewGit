define(['/js/plugins/jqGrid/js/grid.locale-cn.js'], function (require) {
    Mom.include('jqGrid_css', '/js/plugins/jqGrid/css/', [
        'themes/start/jquery-ui-1.8.20.custom.css',
        'ui.jqgrid.css',
        'jqGrid_my.css'
    ]);
    // $.parser.parse();
    var jqGridAll = {
        //data本地请求后传参
        configData: function (jsonData) {
            return {
                data: jsonData,//组件创建完成之后请求数据的url
                datatype: "local",//引入数据类型
                mtype: "GET"//请求方式
            }
        },
        //折叠表本地参数
        configUrl: function () {
            return {
                data: '',
                datatype: "json"
            }
        },
        //基础设置
        config: function (title, colNames, colModel) {
            /*返回的数据、表标题、表头th名称、内容模型(列)，需要计算的列明如‘daylan’*/
            return {
                height: '40%',//高度
                colNames: colNames,//jqGrid的列显示名字
                colModel: colModel,//表格内容规则
                width: '100%',//宽度
                autowidth: true,//自适应宽度
                caption: title,//表格的标题名字
                forceFit: false,//调整列宽度不会改变表格的宽度
                shrinkToFit: true, //缩小到合适
                rowNum:-1,
            }
        },
        //是否编辑  编辑项目对传过来的数据有要求 ID不能重复 如果重复 失焦的时候会导致乱序
        editFn: function () {
            return {
                cellsubmit: 'clientArray', //表格递交位置
                editurl: 'clientArray',    //编辑保存地址
                cellEdit: true           //编辑单个元格

            }
        },
        //编辑列方法
        editRowFn: function (tableId,lastsel) {
            return {
                cellsubmit: 'clientArray', //表格递交位置
                editurl: 'clientArray',    //编辑保存地址
                onSelectRow: function (id,statu) {
                    if (id && id !== lastsel) {
                        $(tableId).saveRow(lastsel, false, 'clientArray');
                        $(tableId).restoreRow(lastsel);
                        $(tableId).editRow(id, false);
                        lastsel = id;
                    }
                    $(tableId).find('input[type=text]').each(function () {
                        $(this).on('keyup',function () {
                            var val=$(this).val();
                            var regForEdit=/^\d+(\.\d{0,2})?$/;
                            if(!regForEdit.test(val)){
                                $(this).val('');
                                Mom.layMsg('请输入数字,且保留两位小数');
                            }

                        })
                    })

                }
            }
        },
        //计算 需要和config合并 通过$.extend()拼接对象
        conSum: function (tabName, sumCol) {
            return {
                gridview: true,//构造一行数据后添加到grid中
                footerrow: true,
                loadComplete: function () {
                    //失去焦点的时候 让td渲染上input填写的值
                    $('input[type=text].editable').each(function (i, item) {
                        $(item).on('blur', function () {
                            $(this).parents('td').text($(this).val());
                            $(this).remove();
                        })
                    });
                    var sumObj = {};
                    for (var e = 0; e < sumCol.length; e++) {
                        var sumValue = $(tabName).getCol(sumCol[e], true, 'sum');
                        sumObj[sumCol[e]] = sumValue;
                    }
                    $(tabName).footerData('set', sumObj);//合计值存放位置以真实数据位置为准
                },
                onCellSelect: function () {
                    //点击的时候 让td渲染上input填写的值
                    $('input[type=text].editable').each(function (i, item) {
                        $(this).parents('td').text($(this).val());
                    });
                    var sumObj = {};
                    for (var e = 0; e < sumCol.length; e++) {
                        var sumValue = $(tabName).getCol(sumCol[e], true, 'sum');
                        sumObj[sumCol[e]] = sumValue;
                    }
                    $(tabName).footerData('set', sumObj);//合计值存放位置以真实数据位置为准
                }
            }
        },
        gridComplete:function (gridName,CellName) {
            return {
                sortname: 'name',
                gridComplete:function () {
                    jqGridAll.MergerStatistics(gridName, CellName)
                }
            }
        },
        //合并列方法 两个参数分别为合并的表id 以及列名
        MergerStatistics: function (gridName, CellName) {
            //当前显示多少条
            var mya = $("#" + gridName + "").getDataIDs();
            var length = mya.length;
            for (var i = 0; i < length; i++) {
                //从上到下获取一条信息
                var before = $("#" + gridName + "").jqGrid('getRowData', mya[i]);
                //定义合并行数
                var rowSpanTaxCount = 1;
                for (j = i + 1; j <= length; j++) {
                    //和上边的信息对比 如果值一样就合并行数+1 然后设置rowspan 让当前单元格隐藏
                    var end = $("#" + gridName + "").jqGrid('getRowData', mya[j]);
                    var cellNames = CellName.split(",");
                    for (var n = 0; n < cellNames.length; n++) {
                        if (before[cellNames[0]] == end[cellNames[0]]) {
                            rowSpanTaxCount++;
                            $("#" + gridName + "").setCell(mya[j], cellNames[0], '', {display: 'none'});
                        } else {
                            rowSpanTaxCount = 1;
                            break;
                        }
                        $("#" + cellNames[0] + "" + mya[i] + "").attr("rowspan", rowSpanTaxCount);//最后合并需要合并的行与合并的行数
                    }
                }
            }
        },
        scrollTop:function(){
            return {
                scroll:true
            }
        },
        //分组
        isGroup: function (groupField, groupTitle) {
            return {
                grouping: true,
                groupingView: {
                    groupField: [groupField],//分组属性
                    groupColumnShow: [false],//是否显示分组列
                    groupText: [groupTitle],//表头显示数据(每组中包含的数据量)
                    groupCollapse: true,//加载数据时是否只显示分组的组信息
                    // groupSummary: [true],//是否显示汇总  如果为true需要在colModel中进行配置summaryType:'max',summaryTpl:'<b>Max: {0}</b>'
                    // groupDataSorted: true,//分组中的数据是否排序
                    // groupOrder: ['desc', 'desc'], //分组后组的排列顺序
                    showSummaryOnHide: false//是否在分组底部显示汇总信息并且当收起表格时是否隐藏下面的分组

                }
            }
        },
        //树形表渲染
        istreeGrid: function (startCol) {
            return {
                treeGrid: true,
                treeGridModel: 'adjacency',//支持两种json格式：nested和adjacency
                ExpandColumn: startCol,
                ExpandColClick: true, //点击展开图标时，自动提交这一行的主键到url参数中获取数据
                treeIcons: {leaf: 'ui-icon-document-b'},
                treeReader: {
                    level_field: "level",           //表示层级字段名
                    parent_id_field: "parentId",      //表示父节点字段名 与上边level相关
                    leaf_field: "isLeaf",           // 是否是子节点
                    expanded_field: "expanded"      //是否默认展开
                }

            }
        },
        //特殊格式渲染 一般用于多个树形表渲染
        renderSpc:function () {
            return{
                jsonReader: {
                    repeatitems: false
                }
            }
        },
        //屏幕改变时调整表格大小
        Resize: function (selector) {
            $(window).resize(function () {
                $(selector).setGridWidth($(window).width());
            });
        }

    };
    return {
        jG_configData: jqGridAll.configData,
        jG_configUrl: jqGridAll.configUrl,
        jG_config: jqGridAll.config,
        jG_editFn: jqGridAll.editFn,
        jG_editRowFn: jqGridAll.editRowFn,
        jG_conSum: jqGridAll.conSum,
        jG_gridComplete:jqGridAll.gridComplete,
        jG_MergerStatistics: jqGridAll.MergerStatistics,
        jG_isGroup: jqGridAll.isGroup,
        jG_istreeGrid: jqGridAll.istreeGrid,
        jG_renderSpc: jqGridAll.renderSpc,
        jG_Resize: jqGridAll.Resize,
        jG_scrollTop:jqGridAll.scrollTop

    };
});